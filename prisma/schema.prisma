// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  addressId             String                @map("address_id")              @db.Uuid
  name                  String                                                @db.VarChar
  phone                 String[]                                              @db.VarChar
  active                Boolean                                               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  rooms                 Room[]
  staffs                Staff[]
  teachers              Teacher[]
  branchSpecialties     BranchSpecialty[]
  accessRecords         AccessRecord[]
  address               Address                                               @relation(fields: [addressId], references: [id])
	@@map("branches")
}
model User {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  addressId             String?               @map("address_id")              @db.Uuid
  numberDocument        String?               @map("number_document")         @unique
  typeDocument          TypeDocument          @map("type_document")           @default(DNI)
  numberCard            String?               @map("number_card")             @unique
  name                  String                                                @db.VarChar
  lastName              String                @map("last_name")               @db.VarChar
  email                 String?                                                @unique
  emailValidated        Boolean               @map("email_validated")         @default(false)
  image                 String?                                               @db.VarChar
  phone                 Json
  password              String                                                @db.VarChar
  codeValidation        String?               @map("code_validation")         @unique
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  staff                 Staff?
  student               Student?
  teacher               Teacher?
  tutor                 Tutor?
  authSessions          AuthSession[]
  accessRecords         AccessRecord[]
  address               Address?                                              @relation(fields: [addressId], references: [id])
	@@map("users")
}
model Staff {
  userId                String                @map("user_id")                 @id @unique @db.Uuid
  roleId                String                @map("role_id")                 @db.Uuid
  active                Boolean                                               @default(true)
  superStaff            Boolean               @map("super_staff")             @default(false)
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  user                  User                                                  @relation(fields: [userId], references: [id])
  role                  Role                                                  @relation(fields: [roleId], references: [id])
  inscriptions          Inscription[]
  Invoices              Invoice[]
  branches              Branch[]
	@@map("staffs")
}
model Address {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cityId                String                @map("city_id")                 @db.Uuid
  zone                  String                                                @db.VarChar
  detail                String                                                @db.VarChar
  users                 User[]
  branches              Branch[]
  city                  City                                                  @relation(fields: [cityId], references: [id])
  @@map("addresses")
}
model City {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                                                @unique @db.VarChar
  address               Address[]
  @@map("cities")
}
model AuthSession {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String                @map("user_id")                 @db.Uuid
  token                 String                                                @db.VarChar @unique
  ipAddress             String                @map("ip_address")              @db.VarChar
  userAgent             String                @map("user_agent")              @db.VarChar
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  revokedAt             DateTime              @map("revoked_at")              @updatedAt
  user                  User                                                  @relation(fields: [userId], references: [id])
  @@map("auth_sessions")
}

model Permission {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roleId                String              @map("role_id")                   @db.Uuid
  action                TypeAction
  subject               TypeSubject
  inverted              Boolean                                               @default(false)
  reason                String?                                               @db.Text
  active                Boolean                                               @default(true)
  createdAt             DateTime            @map("created_at")                @default(now())
  updatedAt             DateTime            @map("updated_at")                @default(now()) @updatedAt
  role                  Role                                                  @relation(fields: [roleId], references: [id])
  conditions            Condition[]
  @@map("permissions")
}
model Condition {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  permissionId          String              @map("permission_id")             @db.Uuid 
  field                 String
  operator              ConditionOperator
  value                 String
  permission            Permission                                            @relation(fields: [permissionId], references: [id])
  @@map("conditions")
}
model Role {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                                                @db.VarChar
  active                Boolean                                               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  permissions           Permission[]
  staff                 Staff[]
	@@map("roles")
}
model Student {
  userId                String                @map("user_id")                 @id @unique @db.Uuid
  schoolId              String                @map("school_id")               @db.Uuid
  code                  String                                                @unique
  birthdate             DateTime
  gender                Gender
  grade                 Int?                                                   @db.Integer
  educationLevel        EducationLevel?       @map("education_level")
  active                Boolean                                               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  user                  User                                                  @relation(fields: [userId], references: [id])
  inscriptions          Inscription[]
  tutors                Tutor[]
  school                School                                                @relation(fields: [schoolId], references: [id])
	@@map("students")
}
model School {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                                                @unique @db.VarChar
  students              Student[]
  @@map("schools")
}
model Tutor {
  userId                String                @map("user_id")                 @id @unique @db.Uuid
  active                Boolean                                               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  user                  User                                                  @relation(fields: [userId], references: [id])
  students              Student[]       
	@@map("tutors")
}
model Teacher {
  userId                String                @map("user_id")                 @id @unique @db.Uuid
  major                 String                                                @db.VarChar
  academicStatus        AcademicStatus        @map("academic_status")
  startJob              DateTime              @map("start_job")               @default(now())
  active                Boolean                                               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  user                  User                                                  @relation(fields: [userId], references: [id])
  mainRooms             Room[]                                                @relation("room_teacher")
  assistedRooms         Room[]                                                @relation("room_assistant")
  branches              Branch[]
	@@map("teachers")
}

model Specialty {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                                                @db.VarChar
  active                Boolean                                               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  branchSpecialties     BranchSpecialty[]
  rooms                 Room[]
  @@map("specialties")
}

model BranchSpecialty {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branchId              String                @map("branch_id")               @db.Uuid
  specialtyId           String                @map("specialty_id")            @db.Uuid
  estimatedSessionCost  Float                 @map("estimated_session_cost")  @default(0.00)
  numberSessions        Int                   @map("number_sessions")         @default(1)
  active                Boolean                                               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  branch                Branch                                                @relation(fields: [branchId], references: [id])
  specialty             Specialty                                             @relation(fields: [specialtyId], references: [id])

  @@unique([branchId, specialtyId])
  @@map("branch_specialties")
}

model Room {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branchId              String                @map("branch_id")               @db.Uuid
  teacherId             String                @map("teacher_id")              @db.Uuid
  assistantId           String                @map("assistant_id")            @db.Uuid
  specialtyId           String                @map("specialty_id")            @db.Uuid
  name                  String                                                @db.VarChar
  rangeYears            Json                  @map("range_years")             @db.Json
  active                Boolean                                               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  branch                Branch                                                @relation(fields: [branchId],references: [id])
  teacher               Teacher                                               @relation("room_teacher",fields: [teacherId], references: [userId])
  assistant             Teacher                                               @relation("room_assistant",fields: [assistantId], references: [userId])
  specialty             Specialty                                             @relation(fields: [specialtyId],references: [id])
  schedules             Schedule[]
  assignmentRooms       AssignmentRoom[]
	@@map("rooms")
}

model AssignmentRoom {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inscriptionId         String                @map("inscription_id")          @db.Uuid
  roomId                String                @map("room_id")                 @db.Uuid
  start                 DateTime
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  inscription           Inscription                                           @relation(fields: [inscriptionId], references: [id])
  room                  Room                                                  @relation(fields: [roomId], references: [id]) 
  assignmentSchedules   AssignmentSchedule[]
  @@unique([inscriptionId, roomId])
	@@map("assignment_rooms")
}
model Schedule {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomId                String                                                @db.Uuid
  capacity              Int                                                   @db.Integer
  day                   DayOfWeek           
  start                 DateTime                                              @default(now())
  end                   DateTime                                              @default(now())
  active                Boolean                                               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  room                  Room                                                  @relation(fields: [roomId], references: [id])   
  assignmentSchedules   AssignmentSchedule[]
	@@map("schedules")
}

model AssignmentSchedule {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assignmentRoomId      String                @map("assignment_room_id")      @db.Uuid
  scheduleId            String                @map("schedule_id")             @db.Uuid
  day                   DayOfWeek
  active                Boolean                                               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  assignmentRoom        AssignmentRoom                                        @relation(fields: [assignmentRoomId], references: [id])
  schedule              Schedule                                              @relation(fields: [scheduleId], references: [id])
  sessions              Session[]
	@@map("assignment_schedules")
}

model Price {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inscriptionId         String                @map("inscription_id")          @db.Uuid
  inscriptionPrice      Float                 @map("inscription_price")       @default(0.00)
  monthPrice            Float                 @map("month_price")             @default(0.00)
  active                Boolean                                               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  inscription           Inscription?                                          @relation(fields: [inscriptionId], references: [id])
	@@map("prices")
}

model Inscription {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studentId             String?               @map("student_id")              @db.Uuid
  bookingId             String?               @unique @map("booking_id")      @db.Uuid
  staffId               String                @map("staff_id")                @db.Uuid
  inscriptionType       InscriptionType?      @map("inscription_type")
  url                   String?                                               @db.VarChar
  active                Boolean               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  student               Student?                                              @relation(fields: [studentId], references: [userId])
  booking               Booking?                                              @relation("booking_to_inscription", fields: [bookingId], references: [id])
  staff                 Staff                                                 @relation(fields: [staffId], references: [userId])
  prices                Price[]
  assignmentRooms       AssignmentRoom[]
  debts                 Debts[]
	@@map("inscriptions")
}
model Booking {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  days                  Int                                                   @db.Integer
  dni                   String                                                @db.VarChar
  name                  String                                                @db.VarChar
  amount                Float                                                 @default(0.00)
  active                Boolean                                               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  inscription           Inscription?                                          @relation("booking_to_inscription")
	@@map("bookings")
}

model Debts {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inscriptionId         String?               @map("inscription_id")          @db.Uuid
  totalAmount           Float                 @map("total_amount")            @default(0.00)
  remainingBalance      Float                 @map("remaining_balance")       @default(0.00)
  type                  TypeDebt                                              @default(MONTH)
  dueDate               DateTime?             @map("due_date")
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  inscription           Inscription?                                          @relation(fields: [inscriptionId], references: [id])
  payments              Payment[]
  Refund                Refund?
	@@map("debts")
}

model Payment {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  debtId                String                @map("debt_id")                 @db.Uuid
  invoiceId             String?               @map("invoice_id")              @db.Uuid
  reference             String?                                               @db.VarChar
  amount                Float                                                 @default(0.00)
  payMethod             PayMethod             @map("pay_method")              @default(CASH)
  active                Boolean                                               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  debt                  Debts                                                 @relation(fields: [debtId], references: [id])
  invoice               Invoice?                                              @relation(fields: [invoiceId], references: [id])
	@@map("payments")
}

model Invoice {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code                  String                                                @db.VarChar
  url                   String?                                               @db.VarChar
  staffId               String                @map("staff_id")                @db.Uuid
  buyerNit              String                @map("buyer_nit")               @db.VarChar
  buyerName             String                @map("buyer_name")              @db.VarChar
  active                Boolean                                               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  staff                 Staff                                                 @relation(fields: [staffId], references: [userId])
  payments              Payment[]
	@@map("invoices")
}

model Refund {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  debtId                String                @map("debt_id")                 @db.Uuid @unique
  reference             String?                                               @db.VarChar
  amount                Float                                                 @default(0.00)
  createdAt             DateTime              @map("created_at")              @default(now())
  Debts                 Debts                                                 @relation(fields: [debtId], references: [id])
	@@map("refunds")
}

model Session {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assignmentScheduleId  String                @map("assignment_schedule_id")  @db.Uuid
  date                  DateTime?                                             @default(now())
  status                AttendanceStatus                                      @default(PENDING)
  observation           String?                                               @db.VarChar
  active                Boolean                                               @default(true)
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  assignmentSchedule    AssignmentSchedule                                    @relation(fields: [assignmentScheduleId], references: [id])
  @@map("sessions")
}
model AccessRecord {
  id                    String                                                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  branchId              String                @map("branch_id")               @db.Uuid
  userId                String                @map("user_id")                 @db.Uuid
  checkIn               DateTime              @map("check_in")                @default(now())
  checkOut              DateTime?             @map("check_out")
  observation           String?
  createdAt             DateTime              @map("created_at")              @default(now())
  updatedAt             DateTime              @map("updated_at")              @default(now()) @updatedAt
  branch                Branch                                                @relation(fields: [branchId], references: [id])
  user                  User                                                  @relation(fields: [userId], references: [id])
  @@map("access_records")
}



// ENUMUS SECTIONS
enum TypeDocument {
  DNI
  RUC
  PASAPORTE
}
enum InscriptionType {
  STUDENTS
  BOOKINGS
}
enum TypeDebt {
  BOOKING
  INSCRIPTION
  MONTH
  PER_SESSION
}
enum PayMethod {
  CASH
  BANK
  QR
}
enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
enum Gender {
  MASCULINO
  FEMENINO
}
enum EducationLevel {
  PRIMARIA
  SECUNDARIA
}
enum AcademicStatus {
  ACTIVO
  INACTIVO
  EGRESADO
  TITULADO
  MAESTRIA
}
enum TypeAction {
  manage
  create
  read
  update
  delete
}
enum TypeSubject {
  all
  permission
  role
  staff
  student
  tutor
  teacher
  assignmentRoom
  assignmentSchedule
  booking
  branch
  room
  specialty
  schedule
  session
  inscription
  debt
  payment
  invoice
  refund
  user
  price
  attendance
}
enum ConditionOperator {
  equals                   // es igual
  not_equals               // no es igual
  in                       // está dentro de una lista de valores
  not_in                   // no está dentro de una lista de valores
  greater_than             // es mayor que
  greater_than_or_equal    // es mayor o igual que
  less_than                // es menor que
  less_than_or_equal       // es menor o igual que
  contains                 // contiene un valor (usado en cadenas de texto o arrays)
  starts_with              // empieza con un valor (solo para strings)
  ends_with                // termina con un valor (solo para strings)
  exists                   // verifica si el campo existe o no (útil para valores opcionales)
}
enum AttendanceStatus {
  PENDING
  PRESENT
  ABSENT
  LATE
  JUSTIFIED
}